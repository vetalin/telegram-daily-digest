/**
 * TelegramBot - –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot API
 */

import TelegramBot from 'node-telegram-bot-api';
import { createLogger } from '../utils/logger';
import { Logger } from 'winston';
import { User, Notification } from '../database/models';

export interface BotConfig {
  token: string;
  webhookUrl?: string;
  polling?: boolean;
}

export interface SendMessageOptions {
  parse_mode?: 'HTML' | 'Markdown' | 'MarkdownV2';
  disable_web_page_preview?: boolean;
  disable_notification?: boolean;
  reply_markup?: any;
}

export interface NotificationMessage {
  chatId: number;
  title?: string;
  content: string;
  options?: SendMessageOptions;
}

export interface SendResult {
  success: boolean;
  messageId?: number;
  error?: string;
}

export class TelegramBotService {
  private bot: TelegramBot;
  private logger: Logger;
  private config: BotConfig;
  private isInitialized: boolean = false;

import config from '../config';
// ...
  constructor(botConfig?: BotConfig) {
    this.logger = createLogger('TelegramBot');

    if (botConfig) {
      this.config = botConfig;
    } else {
      this.config = {
        token: config.botToken,
        webhookUrl: config.webhookUrl,
        polling: config.nodeEnv !== 'production',
      };
    }
// ...

    // –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞
    this.bot = new TelegramBot(this.config.token, {
      polling: this.config.polling,
      webHook: this.config.webhookUrl ? { url: this.config.webhookUrl } : undefined,
    });
  }

  /**
   * –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –±–æ—Ç–∞
   */
  async initialize(): Promise<void> {
    try {
      this.logger.info('Initializing Telegram Bot...');

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ–º polling
      if (!this.config.polling && this.config.webhookUrl) {
        await this.bot.setWebHook(this.config.webhookUrl);
        this.logger.info('Webhook set successfully', {
          url: this.config.webhookUrl,
        });
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await this.bot.getMe();
      this.logger.info('Bot initialized successfully', {
        username: botInfo.username,
        firstName: botInfo.first_name,
        id: botInfo.id,
      });

      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
      this.setupCommandHandlers();

      this.isInitialized = true;
    } catch (error) {
      this.logger.error('Failed to initialize Telegram Bot', { error });
      throw error;
    }
  }

  /**
   * –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
   */
  private setupCommandHandlers(): void {
    // –ö–æ–º–∞–Ω–¥–∞ /start
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id;
      this.sendWelcomeMessage(chatId);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /help
    this.bot.onText(/\/help/, (msg) => {
      const chatId = msg.chat.id;
      this.sendHelpMessage(chatId);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /settings
    this.bot.onText(/\/settings/, (msg) => {
      const chatId = msg.chat.id;
      this.sendSettingsMessage(chatId);
    });

    // –ö–æ–º–∞–Ω–¥–∞ /notifications
    this.bot.onText(/\/notifications (.+)/, (msg, match) => {
      const chatId = msg.chat.id;
      const action = match?.[1];
      this.handleNotificationCommand(chatId, action);
    });

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
    this.bot.on('polling_error', (error) => {
      this.logger.error('Polling error', { error });
    });

    this.bot.on('webhook_error', (error) => {
      this.logger.error('Webhook error', { error });
    });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
   */
  async sendNotification(
    notification: NotificationMessage,
  ): Promise<SendResult> {
    try {
      if (!this.isInitialized) {
        this.logger.warn('Bot not initialized, cannot send notification');
        return { success: false, error: 'Bot not initialized' };
      }

      this.logger.debug('Sending notification', {
        chatId: notification.chatId,
        title: notification.title,
      });

      // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      let message = '';
      if (notification.title) {
        message += `<b>${this.escapeHtml(notification.title)}</b>\n\n`;
      }
      message += this.escapeHtml(notification.content);

      // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
      const options: SendMessageOptions = {
        parse_mode: 'HTML',
        disable_web_page_preview: true,
        ...notification.options,
      };

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
      const result = await this.bot.sendMessage(
        notification.chatId,
        message,
        options,
      );

      this.logger.info('Notification sent successfully', {
        chatId: notification.chatId,
        messageId: result.message_id,
      });

      return {
        success: true,
        messageId: result.message_id,
      };
    } catch (error) {
      this.logger.error('Failed to send notification', {
        error,
        chatId: notification.chatId,
      });

      return {
        success: false,
        error: error instanceof Error ? error.message : 'Unknown error',
      };
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  async sendBulkNotifications(
    notifications: NotificationMessage[],
  ): Promise<SendResult[]> {
    const results: SendResult[] = [];

    this.logger.info('Sending bulk notifications', {
      count: notifications.length,
    });

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–º –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è rate limits
    for (const notification of notifications) {
      const result = await this.sendNotification(notification);
      results.push(result);

      // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏ (Telegram rate limit: 30 msg/sec)
      if (notifications.length > 1) {
        await this.delay(100); // 100ms –∑–∞–¥–µ—Ä–∂–∫–∞
      }
    }

    const successCount = results.filter((r) => r.success).length;
    this.logger.info('Bulk notifications completed', {
      total: notifications.length,
      success: successCount,
      failed: notifications.length - successCount,
    });

    return results;
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private async sendWelcomeMessage(chatId: number): Promise<void> {
    const message = `
ü§ñ <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Daily Digest Bot!</b>

–Ø –±—É–¥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –≤–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π –∏ —Å—Ä–æ—á–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.

<b>–ß—Ç–æ —è —É–º–µ—é:</b>
‚Ä¢ üì∞ –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –¥–∞–π–¥–∂–µ—Å—Ç—ã –Ω–æ–≤–æ—Å—Ç–µ–π
‚Ä¢ üö® –ú–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞–∂–Ω—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö
‚Ä¢ ‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π
‚Ä¢ üîï –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ "—Ç–∏—Ö–∏–º–∏ —á–∞—Å–∞–º–∏"

–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.
    `.trim();

    await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–ø—Ä–∞–≤–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
   */
  private async sendHelpMessage(chatId: number): Promise<void> {
    const message = `
üìã <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>

/start - –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
/notifications on - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/notifications off - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è

<b>–¢–∏–ø—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π:</b>
üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏ –≤–∞–∂–Ω—ã–µ (–≤—Å–µ–≥–¥–∞ –ø—Ä–∏—Ö–æ–¥—è—Ç)
‚ö†Ô∏è –í–∞–∂–Ω—ã–µ (–ø—Ä–∏—Ö–æ–¥—è—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º)
üì¢ –°—Ä–æ—á–Ω—ã–µ (–∑–∞–≤–∏—Å—è—Ç –æ—Ç –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π)

–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /settings.
    `.trim();

    await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
   */
  private async sendSettingsMessage(chatId: number): Promise<void> {
    const message = `
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π</b>

–î–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π:
‚Ä¢ –ü–æ—Ä–æ–≥–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –≤–∞–∂–Ω–æ—Å—Ç–∏
‚Ä¢ –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤
‚Ä¢ –¢–∏—Ö–∏–µ —á–∞—Å—ã
‚Ä¢ –ß–∞—Å—Ç–æ—Ç–∞ –¥–∞–π–¥–∂–µ—Å—Ç–æ–≤

–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.

<b>–ë—ã—Å—Ç—Ä—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>
/notifications on - –í–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
/notifications off - –û—Ç–∫–ª—é—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    `.trim();

    await this.bot.sendMessage(chatId, message, { parse_mode: 'HTML' });
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
   */
  private async handleNotificationCommand(
    chatId: number,
    action?: string,
  ): Promise<void> {
    if (!action) {
      await this.bot.sendMessage(
        chatId,
        '–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /notifications on –∏–ª–∏ /notifications off',
      );
      return;
    }

    const message =
      action.toLowerCase() === 'on'
        ? '‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã'
        : action.toLowerCase() === 'off'
          ? 'üîï –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã'
          : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /notifications on –∏–ª–∏ /notifications off';

    await this.bot.sendMessage(chatId, message);
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –¥–æ—Å—Ç—É–ø–µ–Ω –ª–∏ —á–∞—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
   */
  async isChatAccessible(chatId: number): Promise<boolean> {
    try {
      await this.bot.getChat(chatId);
      return true;
    } catch (error) {
      this.logger.warn('Chat is not accessible', { chatId, error });
      return false;
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —á–∞—Ç–µ
   */
  async getChatInfo(chatId: number) {
    try {
      return await this.bot.getChat(chatId);
    } catch (error) {
      this.logger.error('Failed to get chat info', { chatId, error });
      return null;
    }
  }

  /**
   * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç HTML —Å–∏–º–≤–æ–ª—ã
   */
  private escapeHtml(text: string): string {
    return text
      .replace(/&/g, '&amp;')
      .replace(/</g, '&lt;')
      .replace(/>/g, '&gt;')
      .replace(/"/g, '&quot;')
      .replace(/'/g, '&#x27;');
  }

  /**
   * –ó–∞–¥–µ—Ä–∂–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
   */
  private delay(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  /**
   * –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±–æ—Ç–∞
   */
  async stop(): Promise<void> {
    try {
      if (this.config.polling) {
        await this.bot.stopPolling();
      }
      this.logger.info('Bot stopped successfully');
    } catch (error) {
      this.logger.error('Error stopping bot', { error });
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ (–¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è)
   */
  getBotInstance(): TelegramBot {
    return this.bot;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ –±–æ—Ç
   */
  isReady(): boolean {
    return this.isInitialized;
  }
}
