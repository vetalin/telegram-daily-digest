#!/usr/bin/env node

/**
 * CLI —É—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ Telegram Userbot
 */

import dotenv from 'dotenv';
import { SessionManager } from './SessionManager';
import { createLogger } from '../utils/logger';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const logger = createLogger('SessionCLI');

async function listSessions() {
  try {
    const sessionManager = new SessionManager();
    const sessions = await sessionManager.listSessions();

    if (sessions.length === 0) {
      console.log('üîç –°–µ—Å—Å–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    console.log(`üìã –ù–∞–π–¥–µ–Ω–æ ${sessions.length} —Å–µ—Å—Å–∏–π:`);
    console.log('');

    sessions.forEach((session, index) => {
      console.log(`${index + 1}. ${session.sessionName}`);
      console.log(`   üì± –¢–µ–ª–µ—Ñ–æ–Ω: ${session.phoneNumber}`);
      if (session.username) console.log(`   üë§ Username: @${session.username}`);
      if (session.firstName)
        console.log(
          `   üë§ –ò–º—è: ${session.firstName} ${session.lastName || ''}`,
        );
      console.log(
        `   üìÖ –°–æ–∑–¥–∞–Ω–∞: ${session.createdAt.toLocaleString('ru-RU')}`,
      );
      console.log(
        `   üïí –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞: ${session.lastUsed.toLocaleString('ru-RU')}`,
      );
      console.log(`   ‚úÖ –ê–∫—Ç–∏–≤–Ω–∞: ${session.isActive ? '–î–∞' : '–ù–µ—Ç'}`);
      console.log('');
    });
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–µ—Å—Å–∏–π:', error);
    process.exit(1);
  }
}

async function deleteSession(sessionName: string) {
  try {
    const sessionManager = new SessionManager();

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Å–µ—Å—Å–∏–∏
    const exists = await sessionManager.sessionExists(sessionName);
    if (!exists) {
      console.log(`‚ùå –°–µ—Å—Å–∏—è "${sessionName}" –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`);
      return;
    }

    await sessionManager.deleteSession(sessionName);
    console.log(`‚úÖ –°–µ—Å—Å–∏—è "${sessionName}" —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞`);
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏:', error);
    process.exit(1);
  }
}

async function cleanupSessions(days: number) {
  try {
    const sessionManager = new SessionManager();
    const deleted = await sessionManager.cleanupOldSessions(days);

    if (deleted === 0) {
      console.log(`üßπ –°—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ (—Å—Ç–∞—Ä—à–µ ${days} –¥–Ω–µ–π) –Ω–µ –Ω–∞–π–¥–µ–Ω—ã`);
    } else {
      console.log(`üßπ –£–¥–∞–ª–µ–Ω–æ ${deleted} —Å—Ç–∞—Ä—ã—Ö —Å–µ—Å—Å–∏–π (—Å—Ç–∞—Ä—à–µ ${days} –¥–Ω–µ–π)`);
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å–µ—Å—Å–∏–π:', error);
    process.exit(1);
  }
}

async function generateSessionName(phoneNumber: string) {
  try {
    const sessionManager = new SessionManager();
    const sessionName = sessionManager.generateSessionName(phoneNumber);
    console.log(
      `üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∏–º—è —Å–µ—Å—Å–∏–∏ –¥–ª—è ${phoneNumber}: ${sessionName}`,
    );
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–º–µ–Ω–∏ —Å–µ—Å—Å–∏–∏:', error);
    process.exit(1);
  }
}

function showHelp() {
  console.log('CLI –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ—Å—Å–∏—è–º–∏ Telegram Userbot');
  console.log('');
  console.log('–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:');
  console.log('  npm run sessions:list                  - –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Å—Å–∏–∏');
  console.log('  npm run sessions:delete <sessionName>  - —É–¥–∞–ª–∏—Ç—å —Å–µ—Å—Å–∏—é');
  console.log(
    '  npm run sessions:cleanup [days]        - —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —Å–µ—Å—Å–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 30 –¥–Ω–µ–π)',
  );
  console.log(
    '  npm run sessions:generate <phone>      - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–º—è —Å–µ—Å—Å–∏–∏',
  );
  console.log('');
}

async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  try {
    switch (command) {
      case 'list':
      case 'ls':
        await listSessions();
        break;

      case 'delete':
      case 'rm':
        if (!args[1]) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –∏–º—è —Å–µ—Å—Å–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
          process.exit(1);
        }
        await deleteSession(args[1]);
        break;

      case 'cleanup':
      case 'clean':
        const days = args[1] ? parseInt(args[1]) : 30;
        await cleanupSessions(days);
        break;

      case 'generate':
      case 'gen':
        if (!args[1]) {
          console.log('‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
          process.exit(1);
        }
        await generateSessionName(args[1]);
        break;

      default:
        showHelp();
        break;
    }
  } catch (error) {
    logger.error('–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  main();
}
