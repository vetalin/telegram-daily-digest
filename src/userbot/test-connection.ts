#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */

import dotenv from 'dotenv';
import { TelegramUserbot } from './TelegramUserbot';
import { createUserbotConfig, validateEnvironmentVariables } from './config';
import { createLogger } from '../utils/logger';

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
dotenv.config();

const logger = createLogger('TestConnection');

async function testConnection() {
  try {
    logger.info('üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API...');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    const envValidation = validateEnvironmentVariables();
    if (!envValidation.valid) {
      logger.error(
        `‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: ${envValidation.missing.join(', ')}`,
      );
      logger.info('–£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –≤ .env —Ñ–∞–π–ª–µ —É–∫–∞–∑–∞–Ω—ã:');
      logger.info('API_ID=–≤–∞—à_api_id');
      logger.info('API_HASH=–≤–∞—à_api_hash');
      logger.info('PHONE_NUMBER=+–≤–∞—à_–Ω–æ–º–µ—Ä_—Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      process.exit(1);
    }

    // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
    const config = createUserbotConfig();
    logger.info(`üì± –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –¥–ª—è –Ω–æ–º–µ—Ä–∞: ${config.phoneNumber}`);

    // –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–¥–∫–ª—é—á–∞–µ–º userbot
    const userbot = new TelegramUserbot(config);

    logger.info('üîó –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram...');
    await userbot.connect();

    logger.info('üìã –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–∞–Ω–∞–ª–æ–≤...');
    const channels = await userbot.getChannels();

    logger.info(`‚úÖ –ù–∞–π–¥–µ–Ω–æ ${channels.length} –∫–∞–Ω–∞–ª–æ–≤/–≥—Ä—É–ø–ø:`);
    channels.slice(0, 10).forEach((channel, index) => {
      logger.info(
        `${index + 1}. ${channel.title} (${channel.type}) - ID: ${channel.id}`,
      );
    });

    if (channels.length > 10) {
      logger.info(`... –∏ –µ—â–µ ${channels.length - 10} –∫–∞–Ω–∞–ª–æ–≤`);
    }

    // –û—Ç–∫–ª—é—á–∞–µ–º—Å—è
    await userbot.disconnect();
    logger.info('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!');
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);

    if (error instanceof Error) {
      if (error.message.includes('code')) {
        logger.info(
          'üí° –î–ª—è –ø–µ—Ä–≤–∏—á–Ω–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
        );
        logger.info(
          'üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—É—é –Ω–∞—Å—Ç—Ä–æ–π–∫—É –∏–ª–∏ –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤—Ä—É—á–Ω—É—é',
        );
      }

      if (
        error.message.includes('API_ID') ||
        error.message.includes('API_HASH')
      ) {
        logger.info(
          'üí° –ü–æ–ª—É—á–∏—Ç–µ API_ID –∏ API_HASH –Ω–∞ https://my.telegram.org/auth',
        );
      }
    }

    process.exit(1);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —Å–∫—Ä–∏–ø—Ç –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testConnection().catch(console.error);
}

export { testConnection };
