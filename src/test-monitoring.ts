/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤
 */

import { userbotService } from './services/UserbotService';
import { db } from './database/connection';
import { channelDAO, messageDAO } from './database/dao';
import { createLogger } from './utils/logger';

const logger = createLogger('TestMonitoring');

async function testMonitoring() {
  try {
    logger.info('üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫–∞–Ω–∞–ª–æ–≤...');

    // 1. –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    logger.info('üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö...');
    await db.connect();

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ userbot
    logger.info('‚öôÔ∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ userbot...');
    const configValidation = userbotService.validateConfiguration();

    if (!configValidation.valid) {
      logger.error(
        '‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è userbot –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞:',
        configValidation.errors,
      );
      return;
    }

    logger.info('‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è userbot –∫–æ—Ä—Ä–µ–∫—Ç–Ω–∞');

    // 3. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot (–µ—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã)
    if (
      process.env.API_ID &&
      process.env.API_HASH &&
      process.env.PHONE_NUMBER
    ) {
      logger.info('üîê –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è userbot...');

      try {
        await userbotService.initializeWithMonitoring();
        logger.info('‚úÖ Userbot –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–ø—É—â–µ–Ω');

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
        const status = userbotService.getMonitoringStatus();
        logger.info('üìä –°—Ç–∞—Ç—É—Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', status);

        // –ü—Ä–∏–º–µ—Ä –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
        // await userbotService.addChannelToMonitoring('@test_channel');
      } catch (error) {
        logger.warn(
          '‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å userbot (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç—Ä–µ–±—É–µ—Ç—Å—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞):',
          error,
        );
      }
    } else {
      logger.info(
        '‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è userbot –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é',
      );
    }

    // 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DAO —Ñ—É–Ω–∫—Ü–∏–π
    logger.info('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ DAO —Ñ—É–Ω–∫—Ü–∏–π...');

    // –¢–µ—Å—Ç ChannelDAO
    const testChannel = await channelDAO.createOrGet({
      telegram_channel_id: -1001234567890,
      channel_name: '–¢–µ—Å—Ç–æ–≤—ã–π –∫–∞–Ω–∞–ª',
      channel_username: 'test_channel',
      description: '–ö–∞–Ω–∞–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
    });

    if (testChannel.success) {
      logger.info('‚úÖ –¢–µ—Å—Ç –∫–∞–Ω–∞–ª–∞ –ø—Ä–æ–π–¥–µ–Ω:', testChannel.data?.channel_name);
    }

    // –¢–µ—Å—Ç MessageDAO
    if (testChannel.success && testChannel.data) {
      const testMessage = await messageDAO.create({
        telegram_message_id: 12345,
        channel_id: testChannel.data.channel_id,
        content: '–¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞',
        media_type: 'text',
      });

      if (testMessage.success) {
        logger.info(
          '‚úÖ –¢–µ—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –ø—Ä–æ–π–¥–µ–Ω:',
          testMessage.data?.content.substring(0, 50) + '...',
        );
      }
    }

    // 5. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
    const stats = await messageDAO.getStatistics();
    if (stats.success) {
      logger.info('üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π:', stats.data);
    }

    const channels = await channelDAO.getActiveChannels();
    if (channels.data) {
      logger.info(`üì∫ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤: ${channels.data.length}`);
    }

    logger.info('üéâ –¢–µ—Å—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
  } catch (error) {
    logger.error('‚ùå –û—à–∏–±–∫–∞ –≤–æ –≤—Ä–µ–º—è —Ç–µ—Å—Ç–∞:', error);
  } finally {
    // –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –ë–î
    await db.disconnect();

    // –û—Å—Ç–∞–Ω–æ–≤–∫–∞ userbot
    try {
      await userbotService.shutdown();
    } catch (error) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
    }

    process.exit(0);
  }
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–∞, –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
  testMonitoring().catch((error) => {
    logger.error('–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    process.exit(1);
  });
}

export { testMonitoring };
